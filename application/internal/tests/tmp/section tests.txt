package mypackage

import (
    "testing"

    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/mock"

    "github.com/your-project/bl" // Замените "your-project" на имя вашего проекта
    "github.com/your-project/configs" // Замените "your-project" на имя вашего проекта
    "github.com/your-project/mocks" // Замените "your-project" на имя вашего проекта
)

// ... (код для MockISectionRepository)

func TestGetSection(t *testing.T) {
    t.Run("SuccessGetSectionByID", func(t *testing.T) {
        retOk := configs.CreateError(configs.AllIsOk, nil, "")
        returnSection := &bl.Section{Id: 1, CommandID: 1}
        retUser := &bl.User{Role: configs.Admin}

        mockSectionRepo := new(mocks.MockISectionRepository)
        mockSectionRepo.On("GetSectionByID", 1).Return(returnSection, returnErr)

        ssSrv := bl.SectionService{}
        section, err := ssSrv.GetSection(1, "", retUser, configs.SearchByID, mockSectionRepo)

        assert.Nil(t, err)
        assert.Equal(t, 1, section.Id)

        mockSectionRepo.AssertExpectations(t)
    })

    t.Run("SuccessGetSectionByTeamName", func(t *testing.T) {
        retOk := configs.CreateError(configs.AllIsOk, nil, "")
        returnSection := &bl.Section{Id: 1, CommandID: 1}
        retUser := &bl.User{Role: configs.Admin}

        mockSectionRepo := new(mocks.MockISectionRepository)
        mockSectionRepo.On("GetSectionByTeamName", "Team Name").Return(returnSection, returnErr)

        ssSrv := bl.SectionService{}
        section, err := ssSrv.GetSection(0, "Team Name", retUser, configs.SearchByString, mockSectionRepo)

        assert.Nil(t, err)
        assert.Equal(t, 1, section.Id)

        mockSectionRepo.AssertExpectations(t)
    })

    t.Run("ErrorSearchParameter", func(t *testing.T) {
        retUser := &bl.User{Role: configs.Admin}

        ssSrv := bl.SectionService{}
        _, err := ssSrv.GetSection(0, "", retUser, -1, nil)

        assert.NotNil(t, err)
        assert.Equal(t, configs.ErrSearchParameter, err.ErrNum)
    })

    t.Run("ErrorAccessDenied", func(t *testing.T) {
        retUser := &bl.User{Role: configs.Reader}

        ssSrv := bl.SectionService{}
        _, err := ssSrv.GetSection(0, "", retUser, configs.SearchByID, nil)

        assert.NotNil(t, err)
        assert.Equal(t, configs.ErrAccessDenied, err.ErrNum)
    })
}

func TestGetAllSections(t *testing.T) {
    t.Run("SuccessGetAllSections", func(t *testing.T) {
        retOk := configs.CreateError(configs.AllIsOk, nil, "")
        returnSections := []*bl.Section{
            {Id: 1, CommandID: 1},
            {Id: 2, CommandID: 2},
        }
        retUser := &bl.User{Role: configs.Admin}

        mockSectionRepo := new(mocks.MockISectionRepository)
        mockSectionRepo.On("GetAllSections").Return(returnSections, returnErr)

        ssSrv := bl.SectionService{}
        sections, err := ssSrv.GetAllSections(retUser, mockSectionRepo)

        assert.Nil(t, err)
        assert.Len(t, sections, 2)
        assert.Equal(t, 1, sections[0].Id)
        assert.Equal(t, 2, sections[1].Id)

        mockSectionRepo.AssertExpectations(t)
    })

    t.Run("ErrorAccessDenied", func(t *testing.T) {
        retUser := &bl.User{Role: configs.Reader}

        ssSrv := bl.SectionService{}
        sections, err := ssSrv.GetAllSections(retUser, nil)

        assert.NotNil(t, err)
        assert.Equal(t, configs.ErrAccessDenied, err.ErrNum)

        assert.Nil(t, sections)
    })
}

func TestGetAllNotesInSection(t *testing.T) {
    t.Run("SuccessGetAllNotesInSection", func(t *testing.T) {
        retOk := configs.CreateError(configs.AllIsOk, nil, "")
        returnSection := &bl.Section{Id: 1, CommandID: 1}
        returnNotes := []*bl.Note{
            {Id: 1, OwnerID: 1},
            {Id: 2, OwnerID: 2},
        }
        retUser := &bl.User{Role: configs.Admin, CommandID: 1}

        mockSectionRepo := new(mocks.MockISectionRepository)
        mockSectionRepo.On("GetSectionByID", 1).Return(returnSection, returnErr)
        mockSectionRepo.On("GetAllNotesInSection", returnSection).Return(returnNotes, returnErr)

        ssSrv := bl.SectionService{}
        notes, err := ssSrv.GetAllNotesInSection(1, retUser, mockSectionRepo)

        assert.Nil(t, err)
        assert.Len(t, notes, 2)
        assert.Equal(t, 1, notes[0].Id)
        assert.Equal(t, 2, notes[1].Id)

        mockSectionRepo.AssertExpectations(t)
    })

    t.Run("ErrorGetSectionByID", func(t *testing.T) {
        returnErr := configs.CreateError(configs.ErrGetSectionByID, configs.ErrGetSectionByIDError(), "GetSectionByID")
        retUser := &bl.User{Role: configs.Admin, CommandID: 1}

        mockSectionRepo := new(mocks.MockISectionRepository)
        mockSectionRepo.On("GetSectionByID", 1).Return(nil, returnErr)

        ssSrv := bl.SectionService{}
        notes, err := ssSrv.GetAllNotesInSection(1, retUser, mockSectionRepo)

        assert.NotNil(t, err)
        assert.Equal(t, configs.ErrGetSectionByID, err.ErrNum)

        assert.Nil(t, notes)

        mockSectionRepo.AssertExpectations(t)
    })

    t.Run("ErrorAccessDenied", func(t *testing.T) {
        retOk := configs.CreateError(configs.AllIsOk, nil, "")
        returnSection := &bl.Section{Id: 1, CommandID: 2}
        retUser := &bl.User{Role: configs.Author, CommandID: 1}

        mockSectionRepo := new(mocks.MockISectionRepository)
        mockSectionRepo.On("GetSectionByID", 1).Return(returnSection, returnErr)

        ssSrv := bl.SectionService{}
        notes, err := ssSrv.GetAllNotesInSection(1, retUser, mockSectionRepo)

        assert.NotNil(t, err)
        assert.Equal(t, configs.ErrAccessDenied, err.ErrNum)

        assert.Nil(t, notes)

        mockSectionRepo.AssertExpectations(t)
    })
}

func TestAddNoteToSection(t *testing.T) {
    t.Run("SuccessAddNoteToSection", func(t *testing.T) {
        retOk := configs.CreateError(configs.AllIsOk, nil, "")
        returnSection := &bl.Section{Id: 1, CommandID: 1}
        returnNote := &bl.Note{Id: 1, OwnerID: 1}
        retUser := &bl.User{Role: configs.Admin, CommandID: 1}

        mockSectionRepo := new(mocks.MockISectionRepository)
        mockSectionRepo.On("AddNoteToSection", returnNote, returnSection).Return(returnErr)

        ssSrv := bl.SectionService{}
        err := ssSrv.AddNoteToSection(returnSection, returnNote, retUser, mockSectionRepo)

        assert.Nil(t, err)

        mockSectionRepo.AssertExpectations(t)
    })

    t.Run("ErrorAccessDenied", func(t *testing.T) {
        returnSection := &bl.Section{Id: 1, CommandID: 2}
        returnNote := &bl.Note{Id: 1, OwnerID: 1}
        retUser := &bl.User{Role: configs.Author, CommandID: 1}

        mockSectionRepo := new(mocks.MockISectionRepository)

        ssSrv := bl.SectionService{}
        err := ssSrv.AddNoteToSection(returnSection, returnNote, retUser, mockSectionRepo)

        assert.NotNil(t, err)
        assert.Equal(t, configs.ErrAccessDenied, err.ErrNum)

        mockSectionRepo.AssertExpectations(t)
    })
}

func TestAddSection(t *testing.T) {
    t.Run("SuccessAddSection", func(t *testing.T) {
        retOk := configs.CreateError(configs.AllIsOk, nil, "")
        returnSection := &bl.Section{Id: 1, CommandID: 1}
        retUser := &bl.User{Role: configs.Admin}

        mockSectionRepo := new(mocks.MockISectionRepository)
        mockSectionRepo.On("AddSection", returnSection).Return(returnErr)

        ssSrv := bl.SectionService{}
        err := ssSrv.AddSection(returnSection, retUser, mockSectionRepo)

        assert.Nil(t, err)

        mockSectionRepo.AssertExpectations(t)
    })

    t.Run("ErrorAccessDenied", func(t *testing.T) {
        returnSection := &bl.Section{Id: 1, CommandID: 1}
        retUser := &bl.User{Role: configs.Reader}

        mockSectionRepo := new(mocks.MockISectionRepository)

        ssSrv := bl.SectionService{}
        err := ssSrv.AddSection(returnSection, retUser, mockSectionRepo)

        assert.NotNil(t, err)
        assert.Equal(t, configs.ErrAccessDenied, err.ErrNum)

        mockSectionRepo.AssertExpectations(t)
    })
}

func TestDeleteSection(t *testing.T) {
    t.Run("SuccessDeleteSection", func(t *testing.T) {
        retOk := configs.CreateError(configs.AllIsOk, nil, "")
        retUser := &bl.User{Role: configs.Admin}

        mockSectionRepo := new(mocks.MockISectionRepository)
        mockSectionRepo.On("DeleteSection", 1).Return(returnErr)

        ssSrv := bl.SectionService{}
        err := ssSrv.DeleteSection(1, retUser, mockSectionRepo)

        assert.Nil(t, err)

        mockSectionRepo.AssertExpectations(t)
    })

    t.Run("ErrorAccessDenied", func(t *testing.T) {
        retUser := &bl.User{Role: configs.Reader}

        mockSectionRepo := new(mocks.MockISectionRepository)

        ssSrv := bl.SectionService{}
        err := ssSrv.DeleteSection(1, retUser, mockSectionRepo)

        assert.NotNil(t, err)
        assert.Equal(t, configs.ErrAccessDenied, err.ErrNum)

        mockSectionRepo.AssertExpectations(t)
    })
}

func TestUpdateSection(t *testing.T) {
    t.Run("SuccessUpdateSection", func(t *testing.T) {
        retOk := configs.CreateError(configs.AllIsOk, nil, "")
        returnSection := &bl.Section{Id: 1, CommandID: 1}
        retUser := &bl.User{Role: configs.Admin}

        mockSectionRepo := new(mocks.MockISectionRepository)
        mockSectionRepo.On("UpdateSection", returnSection).Return(returnErr)

        ssSrv := bl.SectionService{}
        err := ssSrv.UpdateSection(returnSection, retUser, mockSectionRepo)

        assert.Nil(t, err)

        mockSectionRepo.AssertExpectations(t)
    })

    t.Run("ErrorAccessDenied", func(t *testing.T) {
        returnSection := &bl.Section{Id: 1, CommandID: 1}
        retUser := &bl.User{Role: configs.Reader}

        mockSectionRepo := new(mocks.MockISectionRepository)

        ssSrv := bl.SectionService{}
        err := ssSrv.UpdateSection(returnSection, retUser, mockSectionRepo)

        assert.NotNil(t, err)
        assert.Equal(t, configs.ErrAccessDenied, err.ErrNum)

        mockSectionRepo.AssertExpectations(t)
    })
}

