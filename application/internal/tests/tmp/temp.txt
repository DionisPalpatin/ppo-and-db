Вот используемые структуры и интерфейсы с методами:
type AppConfigs struct {
	Configs *config.Configs
	Router  mux.Router
	CurUser *models.User

	IServices *bl.IServices
	IRepos    *bl.IRepositories
	Repos     *da.Repositories
}
type IRepositories struct {
	IUsrRepo  IUserRepository
	ISecRepo  ISectionRepository
	INoteRepo INoteRepository
	IColRepo  ICollectionRepository
	ITeamRepo ITeamRepository
}

type IServices struct {
	IUsrSvc   IUserService
	ISecSvc   ISectionService
	INoteSvc  INoteService
	IColSvc   ICollectionService
	ITeamSvc  ITeamService
	IOAuthSvc IOAuthService
}
type INoteService interface {
	GetNote(id int, name string, searchBy int, requester *models.User, inr INoteRepository, isr ISectionRepository, itr ITeamRepository) (*models.Note, []byte, *MyError)
	GetAllNotes(requester *models.User, inr INoteRepository) ([]*models.Note, *MyError)
	AddNote(note *models.Note, requester *models.User, inr INoteRepository) *MyError
	DeleteNote(id int, requester *models.User, inr INoteRepository) *MyError
	UpdateNoteContent(noteID int, requester *models.User, filePath string, inr INoteRepository) *MyError
	UpdateNoteInfo(requester *models.User, note *models.Note, inr INoteRepository) *MyError
	AddNoteToCollection(noteID int, collID int, inr INoteRepository) *MyError
	DeleteNoteFromCollection(noteID int, collID int, inr INoteRepository) *MyError
}
type ICollectionService interface {
	GetCollection(colID int, name string, searchBy int, icr ICollectionRepository) (*models.Collection, *MyError)
	GetAllCollections(user *models.User, icr ICollectionRepository) ([]*models.Collection, *MyError)
	GetAllUsersCollections(user *models.User, icr ICollectionRepository) ([]*models.Collection, *MyError)
	AddCollection(coll *models.Collection, icr ICollectionRepository) *MyError
	DeleteCollection(id int, user *models.User, icr ICollectionRepository) *MyError
	UpdateCollection(collection *models.Collection, icr ICollectionRepository) *MyError
	GetAllNotesInCollection(collection *models.Collection, icr ICollectionRepository) ([]*models.Note, *MyError)
}
type ISectionService interface {
	GetSection(secID int, name string, user *models.User, searchBy int, isr ISectionRepository) (*models.Section, *MyError)
	GetAllSections(user *models.User, isr ISectionRepository) ([]*models.Section, *MyError)
	GetAllNotesInSection(secID int, user *models.User, isr ISectionRepository, itr ITeamRepository) ([]*models.Note, *MyError)
	AddNoteToSection(section *models.Section, note *models.Note, user *models.User, isr ISectionRepository, itr ITeamRepository) *MyError
	DeleteNoteFromSection(section *models.Section, note *models.Note, user *models.User, isr ISectionRepository, itr ITeamRepository) *MyError
	AddSection(section *models.Section, team *models.Team, user *models.User, isr ISectionRepository) *MyError
	DeleteSection(id int, user *models.User, isr ISectionRepository) *MyError
	UpdateSection(section *models.Section, user *models.User, isr ISectionRepository) *MyError
}
type ITeamService interface {
	GetTeam(id int, name string, searchBy int, requester *models.User, itr ITeamRepository) (*models.Team, *MyError)
	GetAllTeams(requester *models.User, itr ITeamRepository) ([]*models.Team, *MyError)
	UpdateTeam(requester *models.User, team *models.Team, itr ITeamRepository) *MyError
	DeleteTeam(requester *models.User, id int, itr ITeamRepository) *MyError
	AddTeam(requester *models.User, team *models.Team, itr ITeamRepository) *MyError
	AddUserToTeam(requester *models.User, userID int, teamID int, itr ITeamRepository) *MyError
	DeleteUserFromTeam(requester *models.User, userID int, teamID int, itr ITeamRepository) *MyError
	GetTeamMembers(teamID int, requester *models.User, itr ITeamRepository) ([]*models.User, *MyError)
	GetUserTeam(user *models.User, itr ITeamRepository) (*models.Team, *MyError)
}
type IUserService interface {
	GetUser(id int, login string, searchBy int, requester *models.User, iur IUserRepository) (*models.User, *MyError)
	GetAllUsers(requester *models.User, iur IUserRepository) ([]*models.User, *MyError)
	UpdateUser(requester *models.User, user *models.User, iur IUserRepository) *MyError
	DeleteUser(requester *models.User, id int, iur IUserRepository) *MyError
}

Напиши хендлеры для этих функций c использованием mux (хендлеры должны быть методами класса AppConfig):
function renderAddNoteForm() {
    const contentArea = document.getElementById('contentArea');
    contentArea.innerHTML = `
    <h3>Добавить Записку</h3>
    <input class="form-input" type="text" id="noteTitle" placeholder="Введите название записки" required>
    <input class="form-input" type="text" id="noteText" placeholder="Введите текст записки" required>
    <input class="form-input" type="file" id="noteImage" accept="image/png, image/jpeg">
    <input class="form-input" type="file" id="noteRawData" accept=".bin,.dat">
    <button id="submitAddNote">Добавить</button>
    <div id="loadingMessage" style="display: none;">Загрузка...</div>
  `;

    document.getElementById('submitAddNote').addEventListener('click', function() {
        const noteTitle = document.getElementById('noteTitle').value;
        const noteText = document.getElementById('noteText').value;
        const noteImage = document.getElementById('noteImage').files[0];
        const noteRawData = document.getElementById('noteRawData').files[0];

        // Получаем userId из localStorage
        const userId = localStorage.getItem('UserId');
        const userRole = localStorage.getItem('UserRole')

        if (!noteTitle) {
            alert('Пожалуйста, введите название записки.');
            return;
        }

        const formData = new FormData();

        formData.append('title', noteTitle);
        formData.append('text', noteText);
        formData.append('userId', userId);
        formData.append('userRole', userRole);// Передаем ID текущего пользователя
        if (noteImage) {
            formData.append('image', noteImage);
        }
        if (noteRawData) {
            formData.append('rawData', noteRawData);
        }

        // Отображаем сообщение о загрузке
        document.getElementById('loadingMessage').style.display = 'block';

        fetch('/api/notes', {
            method: 'POST',
            body: formData
        })
            .then(response => response.json())
            .then(data => {
                document.getElementById('loadingMessage').style.display = 'none';
                alert('Записка добавлена!');
            })
            .catch(error => {
                document.getElementById('loadingMessage').style.display = 'none';
                console.error('Ошибка:', error);
                alert('Ошибка при добавлении записки');
            });
    });
}
function fetchNotes(apiUrl) {
    fetch(apiUrl)
        .then(response => response.json())
        .then(data => {
            const contentArea = document.getElementById('contentArea');
            contentArea.innerHTML = `<h3>Записки</h3>`;
            const list = document.createElement('ul');
            data.forEach(note => {
                const listItem = document.createElement('li');
                listItem.textContent = `${note.id}) ${note.name}`;
                list.appendChild(listItem);
            });
            contentArea.appendChild(list);
        })
        .catch(error => {
            console.error('Ошибка:', error);
        });
}
function renderDeleteNoteFromSectionForm() {
    const contentArea = document.getElementById('contentArea');
    contentArea.innerHTML = `
    <h3>Удалить Записку из Раздела</h3>
    <input class="form-input" type="text" id="noteId" placeholder="ID или название записки">
    <input class="form-input" type="text" id="sectionId" placeholder="ID раздела">
    <button id="submitDeleteNoteFromSection">Удалить</button>
  `;

    document.getElementById('submitDeleteNoteFromSection').addEventListener('click', function() {
        const noteId = document.getElementById('noteId').value;
        const sectionId = document.getElementById('sectionId').value;

        let apiUrl;
        // Проверяем, является ли ввод числом, если да — это ID
        if (!isNaN(noteId)) {
            apiUrl = `/api/sections/${sectionId}/notes/id/${noteId}`;
        } else {
            // Иначе будем искать по имени
            apiUrl = `/api/sections/${sectionId}/notes/name/${noteId}`;
        }

        fetch(apiUrl, {
            method: 'DELETE'
        }).then(response => response.json()).then(data => {
            alert(data.message || 'Записка удалена');
        });
    });
}
function renderAddNoteToSectionForm() {
    const contentArea = document.getElementById('contentArea');
    contentArea.innerHTML = `
    <h3>Добавить Записку в Раздел</h3>
    <input class="form-input" type="text" id="noteId" placeholder="ID или название записки">
    <input class="form-input" type="text" id="sectionId" placeholder="ID раздела">
    <button id="submitAddNoteToSection">Добавить</button>
  `;

    document.getElementById('submitAddNoteToSection').addEventListener('click', function() {
        const noteId = document.getElementById('noteId').value;
        const sectionId = document.getElementById('sectionId').value;

        let apiUrl;
        // Проверяем, является ли ввод числом, если да — это ID
        if (!isNaN(noteId)) {
            apiUrl = `/api/sections/${sectionId}/notes/id/${noteId}`;
        } else {
            // Иначе будем искать по имени
            apiUrl = `/api/sections/${sectionId}/notes/name/${noteId}`;
        }

        fetch(apiUrl, {
            method: 'POST',
            body: JSON.stringify({ noteId }),
            headers: { 'Content-Type': 'application/json' }
        }).then(response => response.json()).then(data => {
            alert(data.message || 'Записка добавлена');
        });
    });
}
function renderDeleteNoteForm() {
    const contentArea = document.getElementById('contentArea');
    contentArea.innerHTML = `
    <h3>Удалить Записку</h3>
    <input class="form-input" type="text" id="noteId" placeholder="Введите ID или имя записки">
    <button id="submitDeleteNote">Удалить</button>
  `;

    document.getElementById('submitDeleteNote').addEventListener('click', function() {
        const noteId = document.getElementById('noteId').value;

        let apiUrl;
        // Проверяем, является ли ввод числом, если да — это ID
        if (!isNaN(noteId)) {
            apiUrl = `/api/notes/id/${noteId}`;
        } else {
            // Иначе будем искать по имени
            apiUrl = `/api/notes/name/${noteId}`;
        }

        fetch(apiUrl, {
            method: 'DELETE'
        })
            .then(response => response.json())
            .then(data => {
                alert('Записка удалена!');
            })
            .catch(error => {
                console.error('Ошибка:', error);
            });
    });
}