type Collection struct {
	Id           int
	Name         string
	CreationDate string
	OwnerID      int
}
type Note struct {
	Id               int
	Access           int
	Name             string
	ContentType      int
	Likes            int
	Dislikes         int
	RegistrationDate string
	OwnerID          int
	SectionID        int
}
type Section struct {
	Id           int
	CreationDate string
}
type Team struct {
	Id               int
	Name             string
	RegistrationDate string
}
type User struct {
	Id               int
	Fio              string
	RegistrationDate string
	Login            string
	Password         string
	Role             int
}
query := fmt.Sprintf("SELECT * FROM %s.collections WHERE id = $1", schemaName)
query := fmt.Sprintf("SELECT * FROM %s.collections WHERE name = $1", schemaName)
query := fmt.Sprintf("SELECT * FROM %s.collections", schemaName)
query := fmt.Sprintf("SELECT c.* FROM %s.collections c JOIN %s.notes n ON c.id = n.collection_id WHERE n.owner_id = $1", schemaName, schemaName)
query := fmt.Sprintf("INSERT INTO %s.collections (name, creation_date) VALUES ($1, $2)", schemaName)
query1 := fmt.Sprintf("DELETE FROM %s.notes_collections WHERE collection_id = $1", schemaName)
query2 := fmt.Sprintf("DELETE FROM %s.collections WHERE id = $1", schemaName)
result_query := fmt.Sprintf("%s; %s;", query1, query2)
query := fmt.Sprintf("UPDATE %s.collections SET name = $1, creation_date = $2 WHERE id = $3", schemaName)
query := fmt.Sprintf("SELECT * FROM %s.notes n JOIN %s.note_collections nc ON n.id = nc.note_id WHERE nc.collection_id = $1", schemaName, schemaName)
query := fmt.Sprintf("SELECT * FROM %s.notes WHERE id = $1", schemaName)
query := fmt.Sprintf("SELECT * FROM %s.notes WHERE name = $1", schemaName)
query := fmt.Sprintf("SELECT * FROM %s.notes", schemaName)
query := fmt.Sprintf("SELECT * FROM %s.notes WHERE access = 1", schemaName)
query := fmt.Sprintf("INSERT INTO %s.notes (access, name, content_type, likes, dislikes, registration_date, owner_id, section_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)", schemaName)
query1 := fmt.Sprintf("DELETE FROM %s.texts WHERE note_id = $1", schemaName)
query2 := fmt.Sprintf("DELETE FROM %s.images WHERE note_id = $1", schemaName)
query3 := fmt.Sprintf("DELETE FROM %s.raw_datas WHERE note_id = $1", schemaName)
query4 := fmt.Sprintf("DELETE FROM %s.notes_collections WHERE note_id = $1", schemaName)
query5 := fmt.Sprintf("DELETE FROM %s.notes WHERE id = $1", schemaName)
result_query := fmt.Sprintf("%s; %s; %s; %s; %s;", query1, query2, query3, query4, query5)
query := fmt.Sprintf("INSERT INTO %s.texts (data, note_id) VALUES ($1, $2)", schemaName)
query := fmt.Sprintf("INSERT INTO %s.images (data, note_id) VALUES ($1, $2)", schemaName)
query := fmt.Sprintf("INSERT INTO %s.raw_datas (data, note_id) VALUES ($1, $2)", schemaName)
query := fmt.Sprintf("UPDATE %s.notes SET access = $1, name = $2, content_type = $3, likes = $4, dislikes = $5, registration_date = $6, owner_id = $7, section_id = $8 WHERE id = $9", schemaName)
query := fmt.Sprintf("INSERT INTO %s.note_collections (note_id, collection_id) VALUES ($1, $2)", schemaName)
query := fmt.Sprintf("DELETE FROM %s.note_collections WHERE note_id = $1 AND collection_id = $2", schemaName)
query := fmt.Sprintf("SELECT * FROM %s.sections WHERE id = $1", schemaName)
query := fmt.Sprintf("SELECT id, creation_date FROM %s.sections s JOIN %s.teams_sections ts ON s.id = ts.section_id WHERE t.name = $1", schemaName, schemaName)
query := fmt.Sprintf("SELECT * FROM %s.sections", schemaName)
query := fmt.Sprintf("INSERT INTO %s.sections (creation_date) VALUES ($1)", schemaName)
query1 := fmt.Sprintf("INSERT INTO %s.teams_sections (team_id, section_id) VALUES ($2, $3)", schemaName)
result_query := fmt.Sprintf("%s; %s;", query, query1)
query := fmt.Sprintf("DELETE FROM %s.sections WHERE id = $1", schemaName)
query1 := fmt.Sprintf("DELETE FROM %s.teams_sections WHERE section_id = $1", schemaName)
query := fmt.Sprintf("UPDATE %s.sections SET creation_date = $1 WHERE id = $2", schemaName)
query := fmt.Sprintf("SELECT * FROM %s.notes WHERE section_id = $1", schemaName)
query := fmt.Sprintf("UPDATE %s.notes SET section_id = $1 WHERE id = $2", schemaName)
query := fmt.Sprintf("UPDATE %s.notes SET section_id = -1 WHERE id = $1 AND section_id = $2", schemaName)
query := fmt.Sprintf("SELECT * FROM %s.teams WHERE id = $1", schemaName)
query := fmt.Sprintf("SELECT * FROM %s.teams WHERE name = $1", schemaName)
query := fmt.Sprintf("SELECT * FROM %s.teams t JOIN %s.teams_sections ts ON t.id = ts.team_id WHERE ts.section_id = $1", schemaName, schemaName)
query := fmt.Sprintf("SELECT * FROM %s.teams", schemaName)
query := fmt.Sprintf("INSERT INTO %s.teams (name, registration_date) VALUES ($1, $2)", schemaName)
query0 := fmt.Sprintf("SELECT section_id FROM %s.teams_sections WHERE team_id = $1", schemaName)
query1 := fmt.Sprintf("UPDATE %s.notes SET section_id = -1 WHERE section_id = $2", schemaName, schemaName)
query2 := fmt.Sprintf("DELETE FROM %s.teams_sections WHERE team_id = $1", schemaName)
query3 := fmt.Sprintf("DELETE FROM %s.team_members WHERE team_id = $1", schemaName)
query4 := fmt.Sprintf("DELETE FROM %s.teams WHERE id = $1", schemaName)
query5 := fmt.Sprintf("DELETE FROM %s.sections WHERE id = $1", schemaName)
result_query := fmt.Sprintf("%s; %s; %s; %s; %s;", query1, query2, query3, query4, query5)
query := fmt.Sprintf("INSERT INTO %s.team_members (team_id, user_id) values ($1, $2)", schemaName)
query := fmt.Sprintf("DELETE FROM %s.teams_sections WHERE user_id = $1 AND team_id = $2", schemaName)
query := fmt.Sprintf("UPDATE %s.teams SET name = $1, registration_date = $2 WHERE id = $3", schemaName)
query := fmt.Sprintf("SELECT * FROM %s.users u JOIN %s.team_members tm ON u.id = tm.user_id WHERE tm.team_id = $1", schemaName, schemaName)
query := fmt.Sprintf("SELECT * FROM %s.teams t JOIN %s.team_members tm ON t.id = tm.team_id WHERE tm.user_id = $1", schemaName, schemaName)
query := fmt.Sprintf("SELECT * FROM %s.users WHERE id = $1", schemaName)
query := fmt.Sprintf("SELECT * FROM %s.users WHERE login = $1 OR fio = $1", schemaName)
query := fmt.Sprintf("SELECT * FROM %s.users", schemaName)
query := fmt.Sprintf("INSERT INTO %s.users (fio, registration_date, login, password, role) VALUES ($1, $2, $3, $4, $5)", schemaName)
query1 := fmt.Sprintf("DELETE FROM %s.notes_collections WHERE collection_id IN (SELECT id FROM %s.collections WHERE owner_id = $1)", schemaName, schemaName)
query2 := fmt.Sprintf("DELETE FROM %s.collections WHERE owner_id = $1", schemaName)
query3 := fmt.Sprintf("DELETE FROM %s.team_members WHERE user_id = $1", schemaName)
query4 := fmt.Sprintf("DELETE FROM %s.texts WHERE note_id IN (SELECT id FROM %s.notes WHERE owner_id = $1)", schemaName, schemaName)
query5 := fmt.Sprintf("DELETE FROM %s.images WHERE note_id IN (SELECT id FROM %s.notes WHERE owner_id = $1)", schemaName, schemaName)
query6 := fmt.Sprintf("DELETE FROM %s.raw_datas WHERE note_id IN (SELECT id FROM %s.notes WHERE owner_id = $1)", schemaName, schemaName)
query7 := fmt.Sprintf("DELETE FROM %s.notes WHERE owner_id = $1", schemaName)
query8 := fmt.Sprintf("DELETE FROM %s.users WHERE id = $1", schemaName)
result_query := fmt.Sprintf("%s; %s; %s; %s; %s; %s; %s; %s;", query1, query2, query3, query4, query5, query6, query7, query8)
query := fmt.Sprintf("UPDATE %s.users SET fio = $1, registration_date = $2, login = $3, password = $4, role = $5 WHERE id = $6", schemaName)

Напиши скрипт, который бы нашел в файлах в папке эти запросы и заменил их на соответствующие для clickhouse. Приведи полный скрипт, со всеми запросами. Не обязательно писать регулярку, достаточно просто replace(postgresql_query, clickhouse_query)